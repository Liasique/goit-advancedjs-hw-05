Критерії приймання
Створено репозиторій goit-advancedjs-hw-05.
Домашня робота містить посилання на робочу сторінку на GitHub Pages.
До роботи прiкрiплено файл репозиторiю у форматi zip.
Коректно налаштоване середовище розробки.
Коректно налаштований компілятор.
Встановлено source maps в tsconfig.json у проєкті TypeScript.
Формат оцінювання:

Оцінка від 0 до 100
Формат здачi:

Посилання на робочу сторінку на GitHub Pages
Прикрiплений файл репозиторію у форматi zip
ВАЖЛИВО
Переглянь Iнструкцію щодо завантаження робочого файлу з репозиторію на Github

Завдання
Потрібно встановити та налаштувати середовище розробки. Усі детальні кроки описані в роздiлах конспекту 4-6.

Короткий опис дій:

Створи репозиторій на GitHub під назвою goit-advancedjs-hw-05.
Налаштуй середовище розробки (Тема 9.4 “Встановлення та налаштування середовища розробки”).
Налаштуй компілятор (Тема 9.5 “Налаштування компілятора”).
Встанови source maps в tsconfig.json у проєкті TypeScript для налагодження коду у браузері (Тема 9.6 “Debugging”).
УВАГА
Якщо ви вже розпочали встановлення та налаштування середовища під час вивчення теми, то воно має бути готове. У такому випадку повторне виконання цих кроків не потрібне.





Давайте створимо файл index.html у корені проєкту, а також додамо каталог src, який буде містити два файли: index.ts і concatenation.ts.

Оскільки у нас є проєкт, ми можемо просто виконати команду:
tsc

У каталозі src з'явилися два файли: index.js і concatenation.js. Ми досягли того, що хотіли. Ми скомпілювали весь проєкт однією командою.

Але що в цьому незручно? Справа в тому, що файли js і ts знаходяться поруч один до одного. Якщо файлів буде багато, нам, як мінімум, буде важко знайти потрібні. Давайте встановимо два параметри в налаштуваннях: outDir і rootDir.

Додамо ці параметри в tsconfig.json:

{
  "compilerOptions": {
    "rootDir": "./src", // new
    "outDir": "./dist", // new
    "allowJs": false,
    "allowSyntheticDefaultImports": true,
    "emitDecoratorMetadata": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "lib": ["ES2021"],
    "module": "es2020",
    "moduleResolution": "node",
    "preserveConstEnums": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "target": "es2019"
  },
  "include": ["**/*.ts"]
}


І знову виконаємо команду:

tsc


Тепер наш проєкт розділено на дві частини: у dist зберігаються файли js, а в src - файли ts.



Давайте тепер напишемо код, почнемо з index.html:

Зверніть увагу, ми встановили type="module" для script. Це пов'язане з тим, що ми хочемо використовувати команду import у коді, і браузер буде підтримувати його, тільки якщо використовуються модулі.



А тепер давайте опишемо concatenation.ts і index.ts:









Здається, ми все написали правильно, але все одно бачимо помилки, пов'язані з console і document. Якщо ми наведемо курсор на ці помилки, ми побачимо:



Cannot find name 'document'. Do you need to change your target library? Try changing the 'lib' compiler option to include 'dom'.


Отже, нам потрібно додати 'dom' в налаштування 'lib' файлу tsconfig.json:



{
  "compilerOptions": {
    "rootDir": "./src",
    "outDir": "./dist",
    "allowJs": false,
    "allowSyntheticDefaultImports": true,
    "emitDecoratorMetadata": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "lib": ["dom", "ES2021"], // new
    "module": "es2020",
    "moduleResolution": "node",
    "preserveConstEnums": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "target": "es2019"
  },
  "include": ["**/*.ts"]
}


Подивимося, чи вирішилася проблема?






Але якщо ми зараз відкриємо файл index.js в браузері, то отримаємо помилку CORS.






На жаль, ми не можемо використовувати модулі, а отже, команду import, локально. Нам знадобиться сервер. 



﻿Давайте швидко встановимо сервер @web/dev-server. Але для початку ініціалізуємо проєкт через npm:



npm init -y


Тепер встановимо сам сервер:



npm i --save-dev @web/dev-server


Перейдемо до файлу package.json, де нам потрібно додати команду start:



{
  "name": "courses_ts",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "start": "web-dev-server --node-resolve --open --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@web/dev-server": "^0.2.1"
  }
}


А тепер просто запускаємо:



npm start


Якщо ви все зробили правильно, ви маєте отримати такий результат: 






Ми створили невеликий застосунок. Давайте ще трохи поговоримо про зручність розробки. Щоб не виконувати команду 'tsc' щоразу, коли ми змінюємо код, ми можемо використовувати наступну команду:



tsc -w


Вона автоматично слідкуватиме за файлами проєкту і компілювати файли, які були змінені. Для того, щоб не зупиняти виконання npm start щоразу, можна відкрити tsc -w в окремій консолі.